from Bot import bot
import Bot


def Send_Message(chat, text_eng, text_rus, parsemode=None):  # shell for bot.send_message() because of multilingual
    english = Bot.GetUserLang(chat)
    if english is False:
        if parsemode is None:
            bot.send_message(chat, text_rus)
        else:
            bot.send_message(chat, text_rus, parse_mode=parsemode, disable_web_page_preview=True)
    else:
        if parsemode is None:
            bot.send_message(chat, text_eng)
        else:
            bot.send_message(chat, text_eng, parse_mode=parsemode, disable_web_page_preview=True)


# buttons[0] are english, buttons[1] are russian; callbacks are the same
# shell for bot.send_message() [with reply buttons] because of multilingual
def Send_Buttoned_Message(chat, text_eng, text_rus, buttons, callbacks=None, parsemode=None):
    if callbacks is None:
        callbacks = []

    english = Bot.GetUserLang(chat)
    if english is False:  # russian invariant
        if callbacks:
            inline_markup_rus = Bot.types.InlineKeyboardMarkup(row_width=2)
            left_rus = Bot.types.InlineKeyboardButton(buttons[1][0], callback_data=callbacks[0])
            right_rus = Bot.types.InlineKeyboardButton(buttons[1][1], callback_data=callbacks[1])
            inline_markup_rus.add(left_rus, right_rus)
            if parsemode is None:
                bot.send_message(chat, text_rus, reply_markup=inline_markup_rus)
            else:
                bot.send_message(chat, text_rus, reply_markup=inline_markup_rus, parse_mode=parsemode)
        else:
            reply_keyboard_markup_rus = Bot.types.ReplyKeyboardMarkup(resize_keyboard=True)

            # probably can be done better
            if len(buttons[1]) == 6:
                button1 = Bot.types.KeyboardButton(buttons[1][0])
                button2 = Bot.types.KeyboardButton(buttons[1][1])
                button3 = Bot.types.KeyboardButton(buttons[1][2])
                button4 = Bot.types.KeyboardButton(buttons[1][3])
                button5 = Bot.types.KeyboardButton(buttons[1][4])
                button6 = Bot.types.KeyboardButton(buttons[1][5])
                reply_keyboard_markup_rus.add(button1, button2, button3, button4, button5, button6)

            elif len(buttons[1]) == 4:
                button1 = Bot.types.KeyboardButton(buttons[1][0])
                button2 = Bot.types.KeyboardButton(buttons[1][1])
                button3 = Bot.types.KeyboardButton(buttons[1][2])
                button4 = Bot.types.KeyboardButton(buttons[1][3])
                reply_keyboard_markup_rus.add(button1, button2, button3, button4)

            elif len(buttons[1]) == 2:
                button1 = Bot.types.KeyboardButton(buttons[1][0])
                button2 = Bot.types.KeyboardButton(buttons[1][1])
                reply_keyboard_markup_rus.add(button1, button2)

            if parsemode is None:
                bot.send_message(chat, text_rus, reply_markup=reply_keyboard_markup_rus)
            else:
                bot.send_message(chat, text_rus, reply_markup=reply_keyboard_markup_rus, parse_mode=parsemode)

    else:  # english invariant
        if callbacks:
            inline_markup_eng = Bot.types.InlineKeyboardMarkup(row_width=2)
            left_eng = Bot.types.InlineKeyboardButton(buttons[0][0], callback_data=callbacks[0])
            right_eng = Bot.types.InlineKeyboardButton(buttons[0][1], callback_data=callbacks[1])
            inline_markup_eng.add(left_eng, right_eng)
            if parsemode is None:
                bot.send_message(chat, text_eng, reply_markup=inline_markup_eng)
            else:
                bot.send_message(chat, text_eng, reply_markup=inline_markup_eng, parse_mode=parsemode)
        else:
            reply_keyboard_markup_eng = Bot.types.ReplyKeyboardMarkup(resize_keyboard=True)

            # probably can be done better
            if len(buttons[0]) == 6:
                button1 = Bot.types.KeyboardButton(buttons[0][0])
                button2 = Bot.types.KeyboardButton(buttons[0][1])
                button3 = Bot.types.KeyboardButton(buttons[0][2])
                button4 = Bot.types.KeyboardButton(buttons[0][3])
                button5 = Bot.types.KeyboardButton(buttons[0][4])
                button6 = Bot.types.KeyboardButton(buttons[0][5])
                reply_keyboard_markup_eng.add(button1, button2, button3, button4, button5, button6)

            elif len(buttons[0]) == 4:
                button1 = Bot.types.KeyboardButton(buttons[0][0])
                button2 = Bot.types.KeyboardButton(buttons[0][1])
                button3 = Bot.types.KeyboardButton(buttons[0][2])
                button4 = Bot.types.KeyboardButton(buttons[0][3])
                reply_keyboard_markup_eng.add(button1, button2, button3, button4)

            elif len(buttons[0]) == 2:
                button1 = Bot.types.KeyboardButton(buttons[0][0])
                button2 = Bot.types.KeyboardButton(buttons[0][1])
                reply_keyboard_markup_eng.add(button1, button2)

            if parsemode is None:
                bot.send_message(chat, text_eng, reply_markup=reply_keyboard_markup_eng)
            else:
                bot.send_message(chat, text_eng, reply_markup=reply_keyboard_markup_eng, parse_mode=parsemode)


@bot.message_handler(commands=['Start', 'start', 'Lang', 'lang', 'Switch', 'switch'])
def Start(message):
    if not Bot.IfExists(message.chat.id):  # if language is not chosen yet (real start)
        Bot.SetUserLang(message.chat.id, True)

        language_markup = Bot.types.InlineKeyboardMarkup(row_width=2)
        ENG = Bot.types.InlineKeyboardButton("üá¨üáß ENG üá¨üáß", callback_data='ENG')
        RUS = Bot.types.InlineKeyboardButton("üá∑üá∫ RUS üá∑üá∫", callback_data='RUS')
        language_markup.add(ENG, RUS)

        bot.send_message(message.chat.id, "üá¨üáß Hi ü•∞! I'm the bot, who tracks the queue!\n"
                                          "First of all, choose the language you want to use (üá¨üáß by default)\n"
                                          "I will type you using chosen language\n"
                                          "If you see this message not the first time, probably, I've been updated! üñ•\n"
                                          "If you want to switch üá¨üáß to üá∑üá∫, use /lang\n\n"
                                          "üá∑üá∫ –ü—Ä–∏–≤–µ—Ç ü•∞! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å!\n"
                                          "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é üá¨üáß)\n"
                                          "–Ø –±—É–¥—É –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ\n"
                                          "–ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤–ø–µ—Ä–≤—ã–µ, —Ç–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ, —è –æ–±–Ω–æ–≤–∏–ª—Å—è! üñ•\n"
                                          "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫ —Å üá¨üáß –Ω–∞ üá∑üá∫, –∏—Å–ø–æ–ª—å–∑—É–π /lang\n\n")

    elif Bot.GetUserLang(message.chat.id) is True:  # eng or rus
        Bot.SetUserLang(message.chat.id, False)
        Send_Message(message.chat.id, "error", "–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª —è–∑—ã–∫ –Ω–∞ üá∑üá∫")

    else:  # rus to eng
        Bot.SetUserLang(message.chat.id, True)
        Send_Message(message.chat.id, "You have successfully changed the language to üá¨üáß", "error")

    buttons = [["Get in", "Get out", "Show queue", "Skip one person", "Go back", "Help"],
               ["–í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å", "–í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", "–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞",
                "–£–π—Ç–∏ –≤ –∫–æ–Ω–µ—Ü", "–ü–æ–º–æ—â—å - —è –æ–≤–æ—â"]]

    Send_Buttoned_Message(message.chat.id, "Nice to meet you! üôÇ\nUse /help to see the full list of commands...",
                          "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üôÇ\n–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", buttons)


@bot.message_handler(commands=['Help', 'help'])
def Help(message):
    if not Bot.IfExists(message.chat.id):
        Start(message)

    Send_Message(message.chat.id, "Here's a list of my commands\:\n"
                                  "/add \- stand into the end of the queue\n"
                                  "/remove \- remove yourself from the queue\n/show \- show current queue\n"
                                  "/swap \- skip one person from behind to stay in front of you\n"
                                  "/skipAll \- skip everyone and get to the end of the queue\n"
                                  "\nControlü§™me\n\n"
                                  "_Admin commands_\:\n"
                                  "/kick \- kick person from the queue\n"
                                  "/restart \- restart \(clear\) the queue\n\n"
                                  "_–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫_\: /lang –∏–ª–∏ /switch",
                                  "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥\:\n"
                                  "/add \- –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å\n"
                                  "/remove \- –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏\n/show \- –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å\n"
                                  "/swap \- –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤–ø–µ—Ä—ë–¥ —Å–µ–±—è\n"
                                  "/skipAll \- —É–π—Ç–∏ –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏, –Ω–∞—Ö–æ–¥—è—Å—å –≤ –Ω–µ–π\n"
                                  "\n–í–ª–∞—Å—Ç–≤—É–πü§™–º–Ω–æ–π\n\n"
                                  "_–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞_\:\n"
                                  "/kick \- –∫–∏–∫–Ω—É—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥—å\n"
                                  "/restart \- –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å \(–ø–æ—á–∏—Å—Ç–∏—Ç—å\) –æ—á–µ—Ä–µ–¥—å\n\n"
                                  "_Change language_\: /lang or /switch", 'MarkdownV2')


@bot.message_handler(commands=['Add', 'add'])
def Add(message):
    place = Bot.AddUser(message.from_user.first_name, message.from_user.username, message.chat.id)
    if place[1]:
        Send_Message(message.chat.id, f"You've been added to the queue.\n<b>Your place is {place[0]}</b>",
                                      f"–¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.\n<b>–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ - {place[0]}</b>", 'html')
    else:
        Send_Message(message.chat.id, f"Oops, you're already in queue.\n<b>Your place is {place[0]}</b>\n"
                                      f"Use /skipAll to get to the end of the queue\n"
                                      f"Use /swap to to swap with the person behind",
                                      f"–û–π, –∞ —Ç—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏.\n<b>–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ - {place[0]}</b>\n"
                                      f"–ò—Å–ø–æ–ª—å–∑—É–π /skipAll, —á—Ç–æ–±—ã –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Ü–µ –æ—á–µ—Ä–µ–¥–∏\n"
                                      f"–ò—Å–ø–æ–ª—å–∑—É–π /swap, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤–ø–µ—Ä—ë–¥ —Å–µ–±—è", 'html')
    Show(message)


@bot.message_handler(commands=['Show', 'show'])
def Show(message):
    if not Bot.IfExists(message.chat.id):
        Start(message)

    Send_Message(message.chat.id, Bot.FormList(True), Bot.FormList(False), 'MarkdownV2')


@bot.message_handler(commands=['Remove', 'remove'])
def Remove(message):
    if not Bot.IfExists(message.chat.id):
        Start(message)

    place = Bot.RemoveUser(message.from_user.first_name, message.from_user.username)
    if place[1]:
        Send_Message(message.chat.id, "You've been removed from the queue.\nYour story is finished.",
                                      "–¢—ã –≤—ã—à–µ–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏.\n–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞.")
        Bot.ShowUpdates(place[0] - 1, min(3, Bot.GetLength()))
        if place[0] == 1:
            Bot.CallFirst()
    else:
        Send_Message(message.chat.id, "Oops, you're not in the queue yet",
                                      "–û–π, –∞ —Ç—ã –µ—â—ë –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏")


@bot.message_handler(commands=['skipAll', 'skipall', 'SkipAll'])
def SkipAll(message):
    if not Bot.IfExists(message.chat.id):
        Start(message)

    buttons = [["Skip", "Don't skip"], ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö", "–ù–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å"]]
    callbacks = ["skipall", "dontskip"]

    Send_Buttoned_Message(message.chat.id, "Do you really wanna skip everyone?",
                                           "–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –≤—Å–µ—Ö –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å?", buttons, callbacks)


@bot.message_handler(commands=['Swap', 'swap'])
def Swap(message):
    if not Bot.IfExists(message.chat.id):
        Start(message)

    place = Bot.SwapBehind(message.from_user.first_name, message.from_user.username)
    if place[1]:
        Send_Message(Bot.GetChatId(place[0]), f"<b>Attention!</b>\nYour classmate decided to swap places with you "
                                              f"and now you're one step closer to the head of the queue.\n"
                                              f"<b>Now your place is {place[0]}</b>",
                                              f"<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n–¢–≤–æ–π –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫ —Ä–µ—à–∏–ª –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–±—è "
                                              f"–≤–ø–µ—Ä—ë–¥ —Å–µ–±—è, –∏ —Ç–µ–ø–µ—Ä—å —Ç—ã –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –±–ª–∏–∂–µ –∫ –Ω–∞—á–∞–ª—É –æ—á–µ—Ä–µ–¥–∏.\n"
                                              f"<b>–¢–µ–ø–µ—Ä—å —Ç–≤–æ—ë –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ - {place[0]}</b>", 'html')
        Send_Message(Bot.GetChatId(place[0] + 1), f"You successfully swapped with the person from behind.\n"
                                                  f"<b>Now your place is {place[0] + 1}</b>",
                                                  f"–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª—Å—è –º–µ—Å—Ç–∞–º–∏ —Å —á–µ–ª–æ–≤–µ–∫–æ–º –ø–æ–∑–∞–¥–∏ —Ç–µ–±—è.\n"
                                                  f"<b>–¢–µ–ø–µ—Ä—å —Ç–≤–æ—ë –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ - {place[0] + 1}</b>", 'html')
        Bot.ShowUpdates(place[0] - 1, place[0] + 1)
    else:
        if place[0] == 0:
            Send_Message(message.chat.id, f"Oops, you're not in the queue yet. You can't swap places.\n"
                                          f"Use /Add to stand in",
                                          f"–û–π, –∞ —Ç—ã –µ—â—ë –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏. –¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å—Å—è –º–µ—Å—Ç–∞–º–∏.\n"
                                          f"–ò—Å–ø–æ–ª—å–∑—É–π /add, —á—Ç–æ–±—ã –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å")
        else:
            Send_Message(message.chat.id, f"Oops, you're the last in the queue <b>(your place is {place[0]})</b>.\n"
                                          f"There's nobody behind, you can't swap places",
                                          f"–û–π, –∞ —Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ <b>(—Ç–≤–æ—ë –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ - {place[0]})</b>.\n"
                                          f"–ü–æ–∑–∞–¥–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å—Å—è –º–µ—Å—Ç–∞–º–∏", 'html')


@bot.message_handler(commands=['Restart', 'restart'])
def RestartTry(message):
    if not Bot.IfExists(message.chat.id):
        Start(message)

    Bot.RestartTumbler()
    if message.from_user.username != "Fedorucho":
        Send_Message(message.chat.id, "You need admin roots to do this action.\nPlease, enter the special code...",
                                      "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.\n"
                                      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥...")
    else:
        Bot.RestartQueue()
        Send_Message(message.chat.id, "The queue is successfully restarted",
                                      "–û—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞")


@bot.message_handler(commands=['Kick', 'kick'])
def ChangeKickVar(message):
    if not Bot.IfExists(message.chat.id):
        Start(message)

    if message.from_user.username != "Fedorucho":
        Bot.KickTryTumbler()
        Send_Message(message.chat.id, "You need admin roots to do this action.\nPlease, enter the special code...",
                                      "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.\n"
                                      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥...")
    else:
        Bot.RealKickTumbler()
        Send_Message(message.chat.id, "Ok\, enter the _position_ of the person you want to kick\.\.\.",
                                      "O–∫\, –≤–≤–µ–¥–∏ _–º–µ—Å—Ç–æ_ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –∫–∏–∫–Ω—É—Ç—å\.\.\.", 'MarkdownV2')


@bot.message_handler(content_types=['text'])
def Special(message):
    if not Bot.IfExists(message.chat.id):
        Start(message)

    if Bot.restart_try:
        if message.text == str(Bot.CODE):
            Bot.RestartQueue()
            Send_Message(message.chat.id, "The queue is successfully restarted",
                                          "–û—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞")
        else:
            Send_Message(message.chat.id, "The code is incorrect.\nIf you believe you're an admin, "
                                          "try the command again",
                                          "–ù–µ–≤–µ—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥.\n–ï—Å–ª–∏ —Ç—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –∞–¥–º–∏–Ω, "
                                          "–ø–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑")

    elif Bot.kick_try:
        if message.text == str(Bot.CODE):
            Send_Message(message.chat.id, "Ok\, enter the _position_ of the person you want to kick\.\.\.",
                                          "O–∫\, –≤–≤–µ–¥–∏ _–º–µ—Å—Ç–æ_ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –∫–∏–∫–Ω—É—Ç—å\.\.\.", 'MarkdownV2')
            Bot.RealKickTumbler()
        else:
            Send_Message(message.chat.id, "The code is incorrect.\nIf you believe you're an admin, "
                                          "try the command again",
                                          "–ù–µ–≤–µ—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥.\n–ï—Å–ª–∏ —Ç—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –∞–¥–º–∏–Ω, "
                                          "–ø–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑")
        Bot.KickTryTumbler()

    elif Bot.real_kick:
        kick_num = message.json['text']
        if not kick_num.isdigit():
            Send_Message(message.chat.id, "The number is expected, not letters or spaces",
                                          "–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –∞ –Ω–µ –±—É–∫–≤—ã –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã")
        else:
            kick_name = Bot.SuggestUserForKick(int(kick_num))

            if kick_name != "":
                buttons = [["Kick", "Don't kick"], ["–ö–∏–∫–Ω—É—Ç—å", "–ù–µ –∫–∏–∫–∞—Ç—å"]]
                callbacks = ["kick", "dontkick"]

                Send_Buttoned_Message(message.chat.id, f"Do you really want to kick {kick_name} from the "
                                                       f"{kick_num}th position?",
                                                       f"–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –∫–∏–∫–Ω—É—Ç—å {kick_name} —Å "
                                                       f"–ø–æ–∑–∏—Ü–∏–∏ ‚Ññ{kick_num}?", buttons, callbacks)
            else:
                Send_Message(message.chat.id, f"There's nobody with number {kick_num} in the queue.\n"
                                              f"No one has been kicked",
                                              f"–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {kick_num}.\n"
                                              f"–ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω")
        Bot.RealKickTumbler()

    else:
        if (message.text.lower() == "start") or (message.text.lower() == "—Å—Ç–∞—Ä—Ç"):
            Start(message)
        elif (message.text.lower() == "get in") or (message.text.lower() == "–≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å"):
            Add(message)
        elif (message.text.lower() == "show queue") or (message.text.lower() == "–ø–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å"):
            Show(message)
        elif (message.text.lower() == "get out") or (message.text.lower() == "–≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"):
            Remove(message)
        elif (message.text.lower() == "skip one person") or (message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞"):
            Swap(message)
        elif (message.text.lower() == "go back") or (message.text.lower() == "—É–π—Ç–∏ –≤ –∫–æ–Ω–µ—Ü"):
            SkipAll(message)
        elif (message.text.lower() == "help") or (message.text.lower() == "–ø–æ–º–æ—â—å - —è –æ–≤–æ—â"):
            Help(message)
        elif (message.text.lower() == "—Ç–µ–æ—Ä–≤–µ—Ä"):
            Send_Message(message.chat.id, "Points:\n20 - exam\n10 - attendance\n10 - work during lessons\n"
                                          "60 or 80 - control tasks\n20 or 0 - tests in –¶–î–û\n"
                                          "additional points for olympiad tasks",
                                          "–ë–∞–ª–ª—ã:\n20 - —ç–∫–∑–∞–º–µ–Ω\n10 - –ø–æ—Å–µ—â–µ–Ω–∏–µ\n10 - —Ä–∞–±–æ—Ç–∞ –Ω–∞ –ø–∞—Ä–µ\n"
                                          "60 –∏–ª–∏ 80 - –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ\n20 –∏–ª–∏ 0 - —Ç–µ—Å—Ç—ã –≤ –¶–î–û\n"
                                          "–¥–æ–ø –±–∞–ª–ª—ã –∑–∞ –∫–æ–Ω–∫—É—Ä—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        else:
            Send_Message(message.chat.id, "Sorry, I can't understand you. Please, use suggested commands.\n"
                                          "Go /Help to see the full list of commands",
                                          "–ü—Ä–æ—Å—Ç–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                                          "–ù–∞–∂–º–∏ /Help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:

            # kick or not
            if call.data == 'kick':
                kicked = Bot.KickUser(Bot.to_kick)
                Send_Message(kicked[0], "You've been kicked from the queue by the admin due to the bad behaviour.\n"
                                        "YOUR STORY IS FINISHED!",
                                        "–ê–¥–º–∏–Ω –∏—Å–∫–ª—é—á–∏–ª —Ç–µ–±—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∑–∞ –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.\n"
                                        "–¢–í–û–Ø –ò–°–¢–û–†–ò–Ø –û–ö–û–ù–ß–ï–ù–ê!")
                Send_Message(call.message.chat.id, f"{kicked[1]} has been kicked.", f"{kicked[1]} –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω.")
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup='')

            elif call.data == 'dontkick':
                Send_Message(call.message.chat.id, "No problem, nothing changed",
                                                   "–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º, –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup='')

            # skip or not
            if call.data == 'skipall':
                place = Bot.TrySkip(call.message.chat.first_name, call.message.chat.username, call.message.chat.id)
                if place[0] != 0:
                    Send_Message(call.message.chat.id, f"You've skipped everyone and got into the end of the queue.\n"
                                                       f"<b>Now your place is {place[0]}</b>",
                                                       f"–¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤—Å–µ—Ö –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –≤—Å—Ç–∞–ª –≤ –µ—ë –∫–æ–Ω–µ—Ü.\n"
                                                       f"<b>–¢–µ–ø–µ—Ä—å —Ç–≤–æ—ë –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ - {place[0]}</b>", 'html')
                    Bot.ShowUpdates(place[1] - 1, min(3, Bot.GetLength()))
                    if place[1] == 1:
                        Bot.CallFirst()
                else:
                    Send_Message(call.message.chat.id, "Oops, you're not in the queue yet.\n"
                                                       "Use /add to stand in",
                                                       "–û–π, –∞ —Ç—ã –µ—â—ë –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏.\n"
                                                       "–ò—Å–ø–æ–ª—å–∑—É–π /add, —á—Ç–æ–±—ã –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å")
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup='')
            elif call.data == 'dontskip':
                Send_Message(call.message.chat.id, "No problem, nothing changed",
                                                   "–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º, –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup='')

            # choosing language
            if call.data == 'ENG':
                Bot.SetUserLang(call.message.chat.id, True)
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup='')

            elif call.data == 'RUS':
                Bot.SetUserLang(call.message.chat.id, False)
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup='')
    except:
        pass


bot.polling(none_stop=True)

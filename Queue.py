from Bot import bot
import Bot


@bot.message_handler(commands=['Start', 'start'])
def Start(message):
    # english keyboard buttons
    buttons_markup_eng = Bot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    get_in_eng = Bot.types.KeyboardButton("Get in")
    get_out_eng = Bot.types.KeyboardButton("Get out")
    show_eng = Bot.types.KeyboardButton("Show queue")
    swap_eng = Bot.types.KeyboardButton("Skip one person")
    skipall_eng = Bot.types.KeyboardButton("Go back")
    help_eng = Bot.types.KeyboardButton("Help")
    buttons_markup_eng.add(get_in_eng, get_out_eng, show_eng, swap_eng, skipall_eng, help_eng)

    # russian keyboard buttons
    buttons_markup_rus = Bot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    get_in_rus = Bot.types.KeyboardButton("–í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å")
    get_out_rus = Bot.types.KeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
    show_rus = Bot.types.KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å")
    swap_rus = Bot.types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞")
    skipall_rus = Bot.types.KeyboardButton("–£–π—Ç–∏ –≤ –∫–æ–Ω–µ—Ü")
    help_rus = Bot.types.KeyboardButton("–ü–æ–º–æ—â—å - —è –æ–≤–æ—â")
    buttons_markup_rus.add(get_in_rus, get_out_rus, show_rus, swap_rus, skipall_rus, help_rus)

    language_markup = Bot.types.InlineKeyboardMarkup(row_width=2)
    ENG = Bot.types.InlineKeyboardButton("üá¨üáß ENG üá¨üáß", callback_data='ENG')
    RUS = Bot.types.InlineKeyboardButton("üá∑üá∫ RUS üá∑üá∫", callback_data='RUS')
    language_markup.add(ENG, RUS)

    bot.send_message(message.chat.id, "üá¨üáß Hi ü•∞! I'm the bot, who tracks the queue!\n"
                                      "First of all, choose the language you want to use...\n"
                                      "I will type you using chosen language\n\n"
                                      "üá∑üá∫ –ü—Ä–∏–≤–µ—Ç ü•∞! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å!\n"
                                      "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å...\n"
                                      "–Ø –±—É–¥—É –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ", reply_markup=language_markup)
    while Bot.English is None:
        pass

    if Bot.English:
        bot.send_message(message.chat.id, "Okay, nice to meet you! üôÇ", reply_markup=buttons_markup_eng)
    else:
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üôÇ", reply_markup=buttons_markup_rus)

    Help(message)


@bot.message_handler(commands=['Lang', 'lang'])
def SetLang(message):
    Bot.LanguageTumbler()
    if Bot.English:
        bot.send_message(message.chat.id, "üá¨üáßNow you are from Englandüá¨üáß!")
    else:
        bot.send_message(message.chat.id, "üá∑üá∫Now you are from Russiaüá∑üá∫!")


@bot.message_handler(commands=['Help', 'help'])
def Help(message):
    if Bot.English:
        bot.send_message(message.chat.id, "Here's a list of my commands:\n/add - stand into the end of the queue\n"
                                          "/remove - remove yourself from the queue\n/show - show current queue\n"
                                          "/swap - skip one person from behind to stay in front of you\n"
                                          "/skipAll - skip everyone and get to the end of the queue\n"
                                          "\nControlü§™me")
    else:
        bot.send_message(message.chat.id, "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥:\n/add - –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å\n"
                                          "/remove - –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏\n/show - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å\n"
                                          "/swap - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤–ø–µ—Ä—ë–¥ —Å–µ–±—è\n"
                                          "/skipAll - —É–π—Ç–∏ –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏, –Ω–∞—Ö–æ–¥—è—Å—å –≤ –Ω–µ–π\n"
                                          "\nControlü§™me")


@bot.message_handler(commands=['Add', 'add'])
def Add(message):
    place = Bot.AddUser(message.from_user.first_name, message.from_user.username, message.chat.id)
    if place[1]:
        if Bot.English:
            bot.send_message(message.chat.id, f"You've been added to the queue.\n"
                                              f"<b>Your place is {place[0]}</b>", parse_mode='html')
        else:
            bot.send_message(message.chat.id, f"–¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.\n"
                                              f"<b>–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ - {place[0]}</b>", parse_mode='html')
    else:
        if Bot.English:
            bot.send_message(message.chat.id, f"Oops, you're already in queue.\n"
                                              f"<b>Your place is {place[0]}</b>\n"
                                              f"Use /skipAll to get to the end of the queue\n"
                                              f"Use /swap to swap with the person behind", parse_mode='html')
        else:
            bot.send_message(message.chat.id, f"–û–π, –∞ —Ç—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏.\n"
                                              f"<b>–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ - {place[0]}</b>\n"
                                              f"–ò—Å–ø–æ–ª—å–∑—É–π /skipAll —á—Ç–æ–±—ã –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Ü–µ –æ—á–µ—Ä–µ–¥–∏\n"
                                              f"–ò—Å–ø–æ–ª—å–∑—É–π /swap —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤–ø–µ—Ä—ë–¥ —Å–µ–±—è",
                             parse_mode='html')
    Show(message)


@bot.message_handler(commands=['Show', 'show'])
def Show(message):
    bot.send_message(message.chat.id, Bot.FormList(), parse_mode='MarkdownV2', disable_web_page_preview=True)


@bot.message_handler(commands=['Remove', 'remove'])
def Remove(message):
    place = Bot.RemoveUser(message.from_user.first_name, message.from_user.username)
    if place[1]:
        if Bot.English:
            bot.send_message(message.chat.id, "You've been removed from the queue.\nYour history is finished.")
        else:
            bot.send_message(message.chat.id, "–¢—ã –≤—ã—à–µ–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏.\n–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞.")
        Bot.ShowUpdates(place[0] - 1, min(3, Bot.GetLength()))
        if place[0] == 1:
            Bot.CallFirst()
    else:
        if Bot.English:
            bot.send_message(message.chat.id, "Oops, you're already not in the queue")
        else:
            bot.send_message(message.chat.id, "–û–π, –∞ —Ç—ã –µ—â—ë –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏")


@bot.message_handler(commands=['SkipAll', 'skipall'])
def SkipAll(message):

    markup_eng = Bot.types.InlineKeyboardMarkup(row_width=2)
    skip_eng = Bot.types.InlineKeyboardButton("Skip", callback_data='skipall')
    dontskip_eng = Bot.types.InlineKeyboardButton("Don't skip", callback_data='dont skip')
    markup_eng.add(skip_eng, dontskip_eng)

    markup_rus = Bot.types.InlineKeyboardMarkup(row_width=2)
    skip_rus = Bot.types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skipall')
    dontskip_rus = Bot.types.InlineKeyboardButton("–ù–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å", callback_data='dont skip')
    markup_rus.add(skip_rus, dontskip_rus)

    if Bot.English:
        bot.send_message(message.chat.id, "Do you really wanna skip everyone?", reply_markup=markup_eng)
    else:
        bot.send_message(message.chat.id, "–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –≤—Å–µ—Ö –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å?", reply_markup=markup_rus)


@bot.message_handler(commands=['Swap', 'swap'])
def Swap(message):
    place = Bot.SwapBehind(message.from_user.first_name, message.from_user.username)
    if place[1]:
        if Bot.English:
            bot.send_message(Bot.GetChatId(place[0]), f"<b>Attention!</b>\nYour classmate decided to swap places with "
                                                      f"you and now you're one step closer to the head of the queue.\n"
                                                      f"<b>Now your place is {place[0]}</b>", parse_mode='html')
            bot.send_message(Bot.GetChatId(place[0] + 1), f"You successfully swapped with the person from behind.\n"
                                                          f"<b>Now your place is {place[0] + 1}</b>", parse_mode='html')
        else:
            bot.send_message(Bot.GetChatId(place[0]), f"<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n–¢–≤–æ–π –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫ —Ä–µ—à–∏–ª –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–±—è "
                                                      f"–≤–ø–µ—Ä—ë–¥ —Å–µ–±—è, –∏ —Ç–µ–ø–µ—Ä—å —Ç—ã –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –±–ª–∏–∂–µ –∫ –Ω–∞—á–∞–ª—É –æ—á–µ—Ä–µ–¥–∏.\n"
                                                      f"<b>–¢–µ–ø–µ—Ä—å —Ç–≤–æ—ë –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ - {place[0]}</b>",
                             parse_mode='html')
            bot.send_message(Bot.GetChatId(place[0] + 1), f"–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª—Å—è –º–µ—Å—Ç–∞–º–∏ —Å —á–µ–ª–æ–≤–µ–∫–æ–º –ø–æ–∑–∞–¥–∏ —Ç–µ–±—è.\n"
                                                          f"<b>–¢–µ–ø–µ—Ä—å —Ç–≤–æ—ë –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ - {place[0] + 1}</b>",
                             parse_mode='html')
        Bot.ShowUpdates(place[0] - 1, place[0] + 1)
    else:
        if Bot.English:
            if place[0] == 0:
                bot.send_message(message.chat.id, f"Oops, you're not in the queue yet. You can't swap places.\n"
                                                  f"Use /add to stand in")
            else:
                bot.send_message(message.chat.id, f"Oops, you're the last in the queue <b>(your place is "
                                                  f"{place[0]})</b>. There's nobody behind, you can't swap places",
                                 parse_mode='html')
        else:
            if place[0] == 0:
                bot.send_message(message.chat.id, f"–û–π, –∞ —Ç—ã –µ—â—ë –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏. –¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å—Å—è –º–µ—Å—Ç–∞–º–∏.\n"
                                                  f"–ò—Å–ø–æ–ª—å–∑—É–π /add, —á—Ç–æ–±—ã –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å")
            else:
                bot.send_message(message.chat.id, f"–û–π, –∞ —Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ <b>(—Ç–≤–æ—ë –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ - "
                                                  f"{place[0]})</b>. –ü–æ–∑–∞–¥–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å—Å—è "
                                                  f"–º–µ—Å—Ç–∞–º–∏", parse_mode='html')


@bot.message_handler(commands=['Restart', 'restart'])
def RestartTry(message):
    Bot.RestartTumbler()
    if message.from_user.username != "Fedorucho":
        if Bot.English:
            bot.send_message(message.chat.id, "You need admin roots to do this action.\n"
                                              "Please, enter the special code...")
        else:
            bot.send_message(message.chat.id, "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.\n"
                                              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥...")
    else:
        Bot.RestartQueue()
        if Bot.English:
            bot.send_message(message.chat.id, "The queue is successfully restarted")
        else:
            bot.send_message(message.chat.id, "–û—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞")


@bot.message_handler(commands=['Kick', 'kick'])
def ChangeKickVar(message):
    if message.from_user.username != "Fedorucho":
        Bot.KickTryTumbler()
        if Bot.English:
            bot.send_message(message.chat.id, "You need admin roots to do this action.\n"
                                              "Please, enter the special code...")
        else:
            bot.send_message(message.chat.id, "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.\n"
                                              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥...")
    else:
        Bot.RealKickTumbler()
        if Bot.English:
            bot.send_message(message.chat.id, "Ok\, enter the _position_ of the person you want to kick\.\.\.",
                             parse_mode='MarkdownV2')
        else:
            bot.send_message(message.chat.id, "O–∫\, –≤–≤–µ–¥–∏ _–º–µ—Å—Ç–æ_ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –∫–∏–∫–Ω—É—Ç—å\.\.\.",
                             parse_mode='MarkdownV2')


@bot.message_handler(content_types=['text'])
def Special(message):
    if Bot.restart_try:
        if message.text == str(Bot.CODE):
            Bot.RestartQueue()
            if Bot.English:
                bot.send_message(message.chat.id, "The queue is successfully restarted")
            else:
                bot.send_message(message.chat.id, "–û—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞")
        else:
            if Bot.English:
                bot.send_message(message.chat.id, "The code is incorrect.\nIf you believe you're an admin, "
                                                  "try the command again")
            else:
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥.\n–ï—Å–ª–∏ —Ç—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –∞–¥–º–∏–Ω, "
                                                  "–ø–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑")

    elif Bot.kick_try:
        if message.text == str(Bot.CODE):
            if Bot.English:
                bot.send_message(message.chat.id, "Ok\, enter the _position_ of the person you want to kick\.\.\.",
                                 parse_mode='MarkdownV2')
            else:
                bot.send_message(message.chat.id, "O–∫\, –≤–≤–µ–¥–∏ _–º–µ—Å—Ç–æ_ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –∫–∏–∫–Ω—É—Ç—å\.\.\.",
                                 parse_mode='MarkdownV2')
            Bot.RealKickTumbler()
        else:
            if Bot.English:
                bot.send_message(message.chat.id, "The code is incorrect.\nIf you believe you're an admin, "
                                                  "try the command again")
            else:
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥.\n–ï—Å–ª–∏ —Ç—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –∞–¥–º–∏–Ω, "
                                                  "–ø–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑")
        Bot.KickTryTumbler()

    elif Bot.real_kick:
        kick_num = message.json['text']
        if not kick_num.isdigit():
            if Bot.English:
                bot.send_message(message.chat.id, "The number is expected, not letters or spaces")
            else:
                bot.send_message(message.chat.id, "–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –∞ –Ω–µ –±—É–∫–≤—ã –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã")
        else:
            kick_name = Bot.SuggestUserForKick(int(kick_num))

            if kick_name != "":
                if Bot.English:
                    # english keyboard
                    markup_eng = Bot.types.InlineKeyboardMarkup(row_width=2)
                    kick_eng = Bot.types.InlineKeyboardButton("Kick", callback_data='kick')
                    dontkick_eng = Bot.types.InlineKeyboardButton("Don't kick", callback_data='dont kick')
                    markup_eng.add(kick_eng, dontkick_eng)

                    bot.send_message(message.chat.id, f"Do you really want to kick {kick_name} from the "
                                                      f"{kick_num}th position?", reply_markup=markup_eng)
                else:
                    # russian keyboard
                    markup_rus = Bot.types.InlineKeyboardMarkup(row_width=2)
                    kick_rus = Bot.types.InlineKeyboardButton("–ö–∏–∫–Ω—É—Ç—å", callback_data='kick')
                    dontkick_rus = Bot.types.InlineKeyboardButton("–ù–µ –∫–∏–∫–∞—Ç—å", callback_data='dont kick')
                    markup_rus.add(kick_rus, dontkick_rus)

                    bot.send_message(message.chat.id, f"–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –∫–∏–∫–Ω—É—Ç—å {kick_name} —Å "
                                                      f"–ø–æ–∑–∏—Ü–∏–∏ ‚Ññ{kick_num}?", reply_markup=markup_rus)
            else:
                if Bot.English:
                    bot.send_message(message.chat.id, f"There's nobody with number {kick_num} in the queue.\n"
                                                      f"No one has been kicked")
                else:
                    bot.send_message(message.chat.id, f"–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {kick_num}.\n"
                                                      f"–ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∫–∏–∫–Ω—É—Ç")
        Bot.RealKickTumbler()

    else:
        if (message.text.lower() == "get in") or (message.text.lower() == "–≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å"):
            Add(message)
        elif (message.text.lower() == "show queue") or (message.text.lower() == "–ø–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å"):
            Show(message)
        elif (message.text.lower() == "get out") or (message.text.lower() == "–≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"):
            Remove(message)
        elif (message.text.lower() == "skip one person") or (message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞"):
            Swap(message)
        elif (message.text.lower() == "go back") or (message.text.lower() == "—É–π—Ç–∏ –≤ –∫–æ–Ω–µ—Ü"):
            SkipAll(message)
        elif (message.text.lower() == "help") or (message.text.lower() == "–ø–æ–º–æ—â—å - —è –æ–≤–æ—â"):
            Help(message)
        else:
            bot.send_message(message.chat.id, "Sorry, I can't understand you. Please, use suggested commands.\n"
                                          "Go /Help to see the full list of commands")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:

            # kick or not
            if call.data == 'kick':
                kicked = Bot.KickUser(Bot.to_kick)
                bot.send_message(kicked[0], "You've been kicked from the queue by the admin "
                                            "due to the bad behaviour.\nYOUR HISTORY IS FINISHED!")
                bot.send_message(call.message.chat.id, f"{kicked[1]} has been kicked.")
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup='')

            elif call.data == 'dont kick':
                bot.send_message(call.message.chat.id, 'No problem, nothing changed')
                bot.edit_message_reply_markup(chat_id=call.message.chat.id,message_id=call.message.message_id,
                                              reply_markup='')

            # skip or not
            if call.data == 'skipall':
                place = Bot.TrySkip(call.message.chat.first_name, call.message.chat.username, call.message.chat.id)
                if place[0] != 0:
                    bot.send_message(call.message.chat.id, f"You've skipped everyone and got into the end of the queue."
                                                           f"\n<b>Now your place is {place[0]}</b>", parse_mode='html')
                    Bot.ShowUpdates(place[1] - 1, min(3, Bot.GetLength()))
                    if place[1] == 1:
                        Bot.CallFirst()
                else:
                    bot.send_message(call.message.chat.id, "Oops, you're not in the queue yet.\nUse /Add to stand in")
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup='')
            elif call.data == 'dont skip':
                bot.send_message(call.message.chat.id, "No problem, nothing changed")
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup='')

            # choosing language
            if call.data == 'ENG':
                Bot.LanguageTumbler("ENG")
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup='')

            elif call.data == 'RUS':
                Bot.LanguageTumbler("RUS")
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup='')

    except:
        pass


bot.polling(none_stop=True)
